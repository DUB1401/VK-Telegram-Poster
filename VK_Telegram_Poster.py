#!/usr/bin/env python3.9

from time import sleep
from telebot.types import InputMediaPhoto

import configparser
import telebot
import vk_api
import sys
import os

#==========================================================================================#
# >>>>> –ß–¢–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö <<<<< #
#==========================================================================================#

ConfigPath = os.path.join(sys.path[0], "Settings.ini")
Config = configparser.ConfigParser()
Config.read(ConfigPath)
LOGIN = Config.get("VK", "LOGIN")
PASSWORD = Config.get("VK", "PASSWORD")
DOMAIN = Config.get("VK", "DOMAIN")
COUNT = Config.get("VK", "COUNT")
VK_TOKEN = Config.get("VK", "TOKEN", fallback = None)
BOT_TOKEN = Config.get("Telegram", "BOT_TOKEN")
CHANNEL = Config.get("Telegram", "CHANNEL")
INCLUDE_LINK = Config.getboolean("Settings", "INCLUDE_LINK")
PREVIEW_LINK = Config.getboolean("Settings", "PREVIEW_LINK")

# –°–∏–º–≤–æ–ª—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
MessageBreakers = [':', ' ', '\n']
# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ Telegram).
MaxMessageLength = 4091
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞.
Bot = telebot.TeleBot(BOT_TOKEN)

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ vk.com
def get_data(domain_vk, count_vk):
	global LOGIN
	global PASSWORD
	global VK_TOKEN
	global Config
	global ConfigPath

	if VK_TOKEN is not None:
		vk_session = vk_api.VkApi(LOGIN, PASSWORD, VK_TOKEN)
		vk_session.auth(token_only=True)
	else:
		vk_session = vk_api.VkApi(LOGIN, PASSWORD)
		vk_session.auth()

	new_token = vk_session.token['access_token']
	if VK_TOKEN != new_token:
		VK_TOKEN = new_token
		Config.set('VK', 'TOKEN', new_token)
		with open(ConfigPath, "w") as config_file:
			Config.write(config_file)

	vk = vk_session.get_api()
	# –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ wall.get –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ API vk.com
	response = vk.wall.get(domain=domain_vk, count=count_vk)
	return response


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É—Å–ª–æ–≤–∏—è–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
def check_posts_vk():
	global DOMAIN
	global COUNT
	global INCLUDE_LINK
	global Bot
	global Config
	global ConfigPath

	response = get_data(DOMAIN, COUNT)
	response = reversed(response['items'])

	for post in response:

		# –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å–Ω—ã–π id –∏–∑ —Ñ–∞–π–ª–∞
		id = Config.get('Settings', 'LAST_ID')

		# –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ
		if int(post['id']) <= int(id):
			continue

		#print('------------------------------------------------------------------------------------------------\n\n')
		#print(post)

		# –¢–µ–∫—Å—Ç
		text = post['text'].replace("@ranoberf", "")

		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —á—Ç–æ —Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ –∫ –ø–æ—Å—Ç—É
		images = []
		links = []
		attachments = []
		if 'attachments' in post:
			attach = post['attachments']
			for add in attach:
				if add['type'] == 'photo':
					img = add['photo']
					images.append(img)
				elif add['type'] == 'audio':
					# –í—Å–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤–µ–∑–¥–µ, –∫—Ä–æ–º–µ –æ—Ñ—Ñ–∏—Ü–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
					continue
				elif add['type'] == 'video':
					video = add['video']
					if 'player' in video:
						links.append(video['player'])
				else:
					for (key, value) in add.items():
						if key != 'type' and 'url' in value:
							attachments.append(value['url'])

		if INCLUDE_LINK:
			post_url = "https://vk.com/" + DOMAIN + "?w=wall" + \
				str(post['owner_id']) + '_' + str(post['id'])
			links.insert(0, post_url)
		text = '\n'.join([text] + links)
		#send_posts_text(text)

		text = text.replace("#", "\#")
		text = text.replace("!", "\!")
		text = text.replace(".", "\.")
		text = text.replace("-", "\-")
		text = text.replace("üëâ", "\üëâüèª")

		MessageParagraphs = text.split('\n')
		ReadHere = ""
		RemovePart = ""

		for index in range(0, len(MessageParagraphs)):
			if "–ß–∏—Ç–∞—Ç—å:" in MessageParagraphs[index]:
				RemovePart = MessageParagraphs[index]
				ReadHere = "\nüëâüèª –ß–∏—Ç–∞—Ç—å [–∑–¥–µ—Å—å](" + MessageParagraphs[index][len("üëâüèª –ß–∏—Ç–∞—Ç—å: "):] + ")\."

		if RemovePart in MessageParagraphs:
			MessageParagraphs.remove(RemovePart)

		text = '\n'.join(MessageParagraphs)

		if len(images) > 0:
			image_urls = list(map(lambda img: max(
				img["sizes"], key=lambda size: size["type"])["url"], images))
			#print(image_urls)

			# –ê–ª—å–±–æ–º —Å –ø–æ—Å—Ç–æ–º.
			MediaGroup = []

			print(text[:1023])

			for i in range(0, len(image_urls)):
				# –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ (—Ñ–∏–∫—Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥ –∞–ª—å–±–æ–º–æ–º).
				if i == 0 and len(text) >= 1024:
					MediaGroup.append(InputMediaPhoto(image_urls[i], caption = text[:1006] + '‚Ä¶\n' + ReadHere, parse_mode = "MarkdownV2"))
				elif i == 0:
					MediaGroup.append(InputMediaPhoto(image_urls[i], caption = text[:1008] + ReadHere, parse_mode = "MarkdownV2"))
				else:
					MediaGroup.append(InputMediaPhoto(image_urls[i]))
			print(text)
			Bot.send_media_group(CHANNEL, MediaGroup)
			sleep(5)


		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ–ø–æ—Å—Ç –¥—Ä—É–≥–æ–π –∑–∞–ø–∏—Å–∏
		if 'copy_history' in post:
			copy_history = post['copy_history']
			copy_history = copy_history[0]
			print('--copy_history--')
			print(copy_history)
			text = copy_history['text']
			send_posts_text(text)

			# –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É —Ä–µ–ø–æ—Å—Ç–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			if 'attachments' in copy_history:
				copy_add = copy_history['attachments']
				copy_add = copy_add[0]

				# –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
				if copy_add['type'] == 'link':
					link = copy_add['link']
					text = link['title']
					send_posts_text(text)
					img = link['photo']
					send_posts_img(img)
					url = link['url']
					send_posts_text(url)

				# –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏
				if copy_add['type'] == 'photo':
					attach = copy_history['attachments']
					for img in attach:
						image = img['photo']
						send_posts_img(image)

		# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º id –≤ —Ñ–∞–π–ª
		Config.set('Settings', 'LAST_ID', str(post['id']))
		with open(ConfigPath, "w") as config_file:
			Config.write(config_file)


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º


# –¢–µ–∫—Å—Ç
def send_posts_text(text):
	global CHANNEL
	global PREVIEW_LINK
	global Bot

	if text == '':
		print('no text')
	else:
		# –í —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –¥–ª–∏–Ω—É –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ 4091 —Å–∏–º–≤–æ–ª, —Ä–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
		for msg in split(text):
			Bot.send_message(CHANNEL, msg, disable_web_page_preview=not PREVIEW_LINK)


def split(text):
	global message_breakers
	global MaxMessageLength

	if len(text) >= MaxMessageLength:
		last_index = max(
			map(lambda separator: text.rfind(separator, 0, MaxMessageLength), message_breakers))
		good_part = text[:last_index]
		bad_part = text[last_index + 1:]
		return [good_part] + split(bad_part)
	else:
		return [text]


# –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def send_posts_img(img):
	global Bot
	
	# –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
	url = max(img["sizes"], key=lambda size: size["type"])["url"]
	Bot.send_photo(CHANNEL, url)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞.
def SendPost(Text, Image):
	global Bot
	
	# –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
	url = max(Image["sizes"], key=lambda size: size["type"])["url"]
	Bot.send_photo(CHANNEL, url, caption = Text)


if __name__ == "__main__":
	check_posts_vk()
